{
  "name": "Rulette-server",
  "tagline": "Standalone REST server for Rulette",
  "body": "[![Build Status](https://travis-ci.org/kislayverma/rulette-server.svg?branch=master)](https://travis-ci.org/kislayverma/rulette-server)\r\n\r\n# Understand\r\nInspired by ElasticSearch, this is a standalone deployment built on RestExpress framework to expose Rulette APIs over REST. This allows non-java users to partake of the goodness.    \r\n\r\n* You can create one or more rule-system under a single instance and use them in all the ways that you would use Rulette in-JVM.    \r\n* Essentially, use this to expose your rule system as a service.\r\n\r\n# Build\r\nTo run the project via Maven:\r\n\r\n\tmvn clean package exec:java\r\n\r\nTo create a 'fat' runnable jar file:\r\n\r\n\tmvn clean package\r\n\r\nTo run the jar file created via package\r\n\r\n\tjava -jar target/{project-name}.jar [environment]\r\n\r\n# Configure\r\nBy default, the 'mvn package' goal will create a fat jar file including the configuration files in src/main/resources.\r\nThese are loaded from the classpath at runtime. However, to override the values embedded in the jar file, simply create\r\na new configuration file on the classpath for the desired environment. For example, './config/dev/environment.properties'\r\nand any settings in that file will get added to, or override settings embedded in the jar file.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}